{"version":3,"file":"index.js","sources":["../../electron/main/healthExamParser/textSearcher.ts","../../electron/main/healthExamParser/PDFHealthDataExtractor.ts","../../electron/main/index.ts"],"sourcesContent":["import dayjs from \"dayjs\";\n\nexport const healthTerms = [\n  \"WBC  Λευκά αιμοσφ.\",\n  \"Ne Ουδετερόφιλα\",\n  \"Ly Λεμφοκύτταρα\",\n  \"Mo Μονοκύτταρα\",\n  \"Eos Ηωσινόφιλα\",\n  \"Bas Βασεόφιλα\",\n  \"RBC Ερυθρά αιμοσφαίρια\",\n  \"HGB Αιμοσφαιρίνη\",\n  \"HCT Αιματοκρίτης\",\n  \"MCV Μέσος όγκος\",\n  \"MCH Μέση περ.Hb\",\n  \"MCHC Μέση πυκνότητα\",\n  \"RDW Εύρος καταν.ερυθρ.\",\n  \"PLT Αιμοπετάλια\",\n  \"MPV Μέσος όγκος αιμοπεταλίων\",\n  \"PCT Αιμοπεταλιοκρίτης\",\n  \"PDW Εύρος κατανομής\",\n] as const;\n\nexport type HealthTermsType = (typeof healthTerms)[number];\n\nfunction getHealthExamDateFromText(text: string) {\n  const dateRegex = /Ημ\\/νία παραλαβής:[0-9]{1,2}\\/[0-9]{1,2}\\/[0-9]{4}/;\n  const regex = new RegExp(dateRegex, \"g\");\n\n  const match = text.match(regex);\n  const date = match?.[0].replace(\"Ημ/νία παραλαβής:\", \"\");\n\n  return dayjs(date).isValid() ? date : undefined;\n}\n\nexport const searchText = (\n  text: string\n): { date: string; result: Map<HealthTermsType, number> } => {\n  const result: Map<HealthTermsType, number> = new Map();\n\n  const date = getHealthExamDateFromText(text);\n\n  const unionOfMetrics = healthTerms.join(\"|\");\n  const regex = new RegExp(`[0-9].*(${unionOfMetrics})`, \"g\");\n  const matches = text.match(regex);\n\n  matches?.forEach((match) => {\n    // this regex based on the format of the above one\n    const indexWhenHealthTermStarts = match.search(/[^(\\d|,)]/);\n\n    const healthTerm = match.substring(indexWhenHealthTermStarts).trim();\n    const value = Number(\n      match.substring(0, indexWhenHealthTermStarts).replace(\",\", \".\")\n    );\n\n    // safe typecast case regex match ensures\n    result.set(healthTerm as HealthTermsType, value);\n  });\n\n  return { date: date || \"\", result };\n};\n","import fs from \"fs\";\nimport pdfParser from \"pdf-parse\";\nimport { HealthTermsType, healthTerms, searchText } from \"./textSearcher\";\nimport path from \"path\";\n\ninterface FileDetails {\n  fileId: number;\n  filename: string;\n  date: string;\n}\n\ninterface HealthTermValueInFile {\n  fileId: number;\n  healthTermValue: number;\n}\ntype FilesResults = Map<HealthTermsType, HealthTermValueInFile[]>;\n\nexport async function extractHealthDataFromPDF(filePath: string): Promise<{\n  date: FileDetails[\"date\"];\n  result: Map<HealthTermsType, number>;\n}> {\n  try {\n    const dataBuffer = fs.readFileSync(filePath);\n    const { text } = await pdfParser(dataBuffer);\n\n    return searchText(text);\n  } catch (error) {\n    console.error(\"Error: \", error);\n\n    return { date: \"\", result: new Map<HealthTermsType, number>() };\n  }\n}\n\nexport async function extractHealthDataFromPDFs() {\n  const pdfsDir = path.resolve(__dirname, '../../pdfs');\n  const filesData: FileDetails[] = [];\n  const healthDataOfAllFiles: FilesResults = new Map(\n    healthTerms.map((term) => [term, []])\n  );\n\n  const filenames = fs.readdirSync(pdfsDir);\n  for (const filename of filenames) {\n    const filePath = `${pdfsDir}/${filename}`;\n\n    const { date, result: healthTermsFromFile } =\n      await extractHealthDataFromPDF(filePath);\n\n    const fileId = filesData.length;\n    filesData.push({ fileId, filename, date });\n\n    healthTermsFromFile.forEach((healthTermValue, healthTerm) => {\n      const existingValuesOfHealthTerm =\n        healthDataOfAllFiles.get(healthTerm) || [];\n\n      existingValuesOfHealthTerm.push({ fileId, healthTermValue });\n\n      healthDataOfAllFiles.set(healthTerm, existingValuesOfHealthTerm);\n    });\n  }\n\n  return { filesData, healthDataOfAllFiles };\n}\n","import { app, BrowserWindow, shell, ipcMain } from \"electron\";\nimport { release } from \"node:os\";\nimport { join } from \"node:path\";\nimport { extractHealthDataFromPDFs } from \"./healthExamParser/PDFHealthDataExtractor\";\n\n// The built directory structure\n//\n// ├─┬ dist-electron\n// │ ├─┬ main\n// │ │ └── index.js    > Electron-Main\n// │ └─┬ preload\n// │   └── index.js    > Preload-Scripts\n// ├─┬ dist\n// │ └── index.html    > Electron-Renderer\n//\nprocess.env.DIST_ELECTRON = join(__dirname, \"..\");\nprocess.env.DIST = join(process.env.DIST_ELECTRON, \"../dist\");\nprocess.env.PUBLIC = process.env.VITE_DEV_SERVER_URL\n  ? join(process.env.DIST_ELECTRON, \"../public\")\n  : process.env.DIST;\n\n// Disable GPU Acceleration for Windows 7\nif (release().startsWith(\"6.1\")) app.disableHardwareAcceleration();\n\n// Set application name for Windows 10+ notifications\nif (process.platform === \"win32\") app.setAppUserModelId(app.getName());\n\nif (!app.requestSingleInstanceLock()) {\n  app.quit();\n  process.exit(0);\n}\n\n// Remove electron security warnings\n// This warning only shows in development mode\n// Read more on https://www.electronjs.org/docs/latest/tutorial/security\n// process.env['ELECTRON_DISABLE_SECURITY_WARNINGS'] = 'true'\n\nlet win: BrowserWindow | null = null;\n// Here, you can also use other preload\nconst preload = join(__dirname, \"../preload/index.js\");\nconst url = process.env.VITE_DEV_SERVER_URL;\nconst indexHtml = join(process.env.DIST, \"index.html\");\n\nasync function createWindow() {\n  win = new BrowserWindow({\n    title: \"Main window\",\n    icon: join(process.env.PUBLIC, \"favicon.ico\"),\n    webPreferences: {\n      preload,\n      // Warning: Enable nodeIntegration and disable contextIsolation is not secure in production\n      // Consider using contextBridge.exposeInMainWorld\n      // Read more on https://www.electronjs.org/docs/latest/tutorial/context-isolation\n      nodeIntegration: true,\n      contextIsolation: false,\n    },\n  });\n\n  if (process.env.VITE_DEV_SERVER_URL) {\n    // electron-vite-vue#298\n    win.loadURL(url);\n    // Open devTool if the app is not packaged\n    win.webContents.openDevTools();\n  } else {\n    win.loadFile(indexHtml);\n  }\n\n  // Test actively push message to the Electron-Renderer\n  win.webContents.on(\"did-finish-load\", () => {\n    win?.webContents.send(\"main-process-message\", new Date().toLocaleString());\n  });\n\n  // Make all links open with the browser, not with the application\n  win.webContents.setWindowOpenHandler(({ url }) => {\n    if (url.startsWith(\"https:\")) shell.openExternal(url);\n    return { action: \"deny\" };\n  });\n  // win.webContents.on('will-navigate', (event, url) => { }) #344\n}\n\napp.whenReady().then(createWindow);\n\napp.on(\"window-all-closed\", () => {\n  win = null;\n  if (process.platform !== \"darwin\") app.quit();\n});\n\napp.on(\"second-instance\", () => {\n  if (win) {\n    // Focus on the main window if the user tried to open another\n    if (win.isMinimized()) win.restore();\n    win.focus();\n  }\n});\n\napp.on(\"activate\", () => {\n  const allWindows = BrowserWindow.getAllWindows();\n  if (allWindows.length) {\n    allWindows[0].focus();\n  } else {\n    createWindow();\n  }\n});\n\n// New window example arg: new windows url\nipcMain.handle(\"open-win\", (_, arg) => {\n  const childWindow = new BrowserWindow({\n    webPreferences: {\n      preload,\n      nodeIntegration: true,\n      contextIsolation: false,\n    },\n  });\n\n  if (process.env.VITE_DEV_SERVER_URL) {\n    childWindow.loadURL(`${url}#${arg}`);\n  } else {\n    childWindow.loadFile(indexHtml, { hash: arg });\n  }\n});\n\nconst parseHealthExams = async () => {\n  const healthData = await extractHealthDataFromPDFs();\n  console.info(\"Results:\", JSON.stringify(objectPrintFormatter(healthData)));\n};\n\nipcMain.on(\n  \"parseHealthExams\",\n  async (e: Electron.IpcMainEvent, content: unknown) => {\n    console.debug(e, content);\n    await parseHealthExams();\n  }\n);\n\nconst objectPrintFormatter = (toPrint: unknown) => {\n  if (toPrint instanceof Set || toPrint instanceof Map) {\n    return JSON.stringify(Array.from(toPrint));\n  } else if (toPrint instanceof Object) {\n    return JSON.stringify(toPrint);\n  }\n  return toPrint;\n};\n"],"names":["join","release","app","BrowserWindow","url","shell","ipcMain"],"mappings":"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"}